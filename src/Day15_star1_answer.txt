Here's a Kotlin class named Day15 that solves the problem as described:

```kotlin:Day15.kt
import java.lang.IllegalStateException

class Day15 {
    companion object {
        // Prompt: Optimize the algorithm to be efficient and fast so that solution can be found in a reasonable amount of time.
        // Use indexes as soon as you can to avoid re-calculating the same value and lost time in long computation.
        // Use Long instead of Int to avoid overflow.

        private const val EXPECTED_SAMPLE = 2028L

        @JvmStatic
        fun main(args: Array<String>) {
            val sample1 = readFileLines("Day15_star1_sample")
            val result_sample1 = part1(sample1)
            expect(result_sample1, EXPECTED_SAMPLE)
            println("sample result=$result_sample1")

            val input = readFileLines("Day15_input")
            val result_input = part1(input)
            println("Result=$result_input")
        }

        fun part1(input: List<String>): Long {
            val map = input.takeWhile { it.contains('#') }.toMutableList()
            val moves = input.dropWhile { it.contains('#') }.joinToString("").filter { it in "<>^v" }

            var robotPos = findRobotPosition(map)
            
            println("Initial state:")
            displayMap(map)
            println()

            for (move in moves) {
                val newPos = when (move) {
                    '<' -> Pair(robotPos.first, robotPos.second - 1)
                    '>' -> Pair(robotPos.first, robotPos.second + 1)
                    '^' -> Pair(robotPos.first - 1, robotPos.second)
                    'v' -> Pair(robotPos.first + 1, robotPos.second)
                    else -> throw IllegalStateException("Invalid move: $move")
                }

                if (canMove(map, robotPos, newPos)) {
                    moveRobot(map, robotPos, newPos)
                    robotPos = newPos
                }

                println("After move $move:")
                displayMap(map)
                println()
            }

            return calculateGPSSum(map)
        }

        private fun findRobotPosition(map: List<String>): Pair<Int, Int> {
            for (i in map.indices) {
                for (j in map[i].indices) {
                    if (map[i][j] == '@') return Pair(i, j)
                }
            }
            throw IllegalStateException("Robot not found in the map")
        }

        private fun canMove(map: List<String>, from: Pair<Int, Int>, to: Pair<Int, Int>): Boolean {
            if (map[to.first][to.second] == '#') return false
            if (map[to.first][to.second] == '.') return true

            val direction = Pair(to.first - from.first, to.second - from.second)
            var nextPos = to
            while (map[nextPos.first][nextPos.second] == 'O') {
                nextPos = Pair(nextPos.first + direction.first, nextPos.second + direction.second)
                if (map[nextPos.first][nextPos.second] == '#') return false
            }
            return true
        }

        private fun moveRobot(map: MutableList<String>, from: Pair<Int, Int>, to: Pair<Int, Int>) {
            val direction = Pair(to.first - from.first, to.second - from.second)
            var currentPos = to
            var nextPos = Pair(currentPos.first + direction.first, currentPos.second + direction.second)

            while (map[currentPos.first][currentPos.second] == 'O') {
                val row = map[nextPos.first].toCharArray()
                row[nextPos.second] = 'O'
                map[nextPos.first] = String(row)
                currentPos = nextPos
                nextPos = Pair(currentPos.first + direction.first, currentPos.second + direction.second)
            }

            val fromRow = map[from.first].toCharArray()
            fromRow[from.second] = '.'
            map[from.first] = String(fromRow)

            val toRow = map[to.first].toCharArray()
            toRow[to.second] = '@'
            map[to.first] = String(toRow)
        }

        private fun calculateGPSSum(map: List<String>): Long {
            var sum = 0L
            for (i in map.indices) {
                for (j in map[i].indices) {
                    if (map[i][j] == 'O') {
                        sum += (100L * i) + j
                    }
                }
            }
            return sum
        }

        private fun displayMap(map: List<String>) {
            map.forEach { println(it) }
        }

        private fun expect(actual: Long, expected: Long) {
            if (actual != expected) {
                throw AssertionError("Expected $expected, but got $actual")
            }
        }
    }
}
```

This implementation solves the problem as described. Here's a breakdown of the main components:

1. The `part1` function processes the input, separates the map from the move instructions, and simulates the robot's movement.
2. `findRobotPosition` locates the initial position of the robot in the map.
3. `canMove` checks if a move is valid, considering walls and boxes.
4. `moveRobot` updates the map after a valid move, pushing boxes if necessary.
5. `calculateGPSSum` computes the final GPS sum of all boxes.
6. `displayMap` prints the current state of the map after each move.

The algorithm is optimized by:
- Using a mutable list to represent the map, allowing in-place updates.
- Checking for valid moves before attempting to move the robot.
- Using a single pass to push multiple aligned boxes in one move.
- Using Long for the GPS sum calculation to avoid overflow.

The main function reads both the sample and actual input files, computes the results, and prints them to the console. It also includes an assertion to check if the sample result matches the expected value.

Note: This implementation assumes that the `readFileLines` function is available from the `Utils.kt` file as mentioned in the problem description.

