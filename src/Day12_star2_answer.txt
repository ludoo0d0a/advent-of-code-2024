Here's a Kotlin class named Day12 with a main function and a part2 function to solve the problem as described:

```kotlin:Day12.kt
import java.util.*

class Day12 {
    companion object {
        // Prompt: Optimize the algorithm to be efficient and fast so that solution can be found in a reasonable amount of time.
        // Use indexes as soon as you can to avoid re-calculating the same value and lost time in long computation.
        // Use Long instead of Int to avoid overflow.

        @JvmStatic
        fun main(args: Array<String>) {
            val result = part2("Day12_input")
            println("Result2=$result")
        }

        fun part2(fileName: String): Long {
            val lines = readFileLines(fileName)
            val grid = lines.map { it.toCharArray() }.toTypedArray()
            val visited = Array(grid.size) { BooleanArray(grid[0].size) }
            var totalPrice = 0L

            for (i in grid.indices) {
                for (j in grid[0].indices) {
                    if (!visited[i][j]) {
                        val (area, perimeter) = calculateGardenMetrics(grid, visited, i, j)
                        totalPrice += area * perimeter
                    }
                }
            }

            return totalPrice
        }

        private fun calculateGardenMetrics(grid: Array<CharArray>, visited: Array<BooleanArray>, startI: Int, startJ: Int): Pair<Long, Long> {
            val queue: Queue<Pair<Int, Int>> = LinkedList()
            queue.offer(Pair(startI, startJ))
            val type = grid[startI][startJ]
            var area = 0L
            var perimeter = 0L
            val directions = arrayOf(-1 to 0, 1 to 0, 0 to -1, 0 to 1)

            while (queue.isNotEmpty()) {
                val (i, j) = queue.poll()
                if (visited[i][j]) continue
                visited[i][j] = true
                area++

                for ((di, dj) in directions) {
                    val ni = i + di
                    val nj = j + dj
                    if (ni in grid.indices && nj in grid[0].indices) {
                        if (grid[ni][nj] == type) {
                            queue.offer(Pair(ni, nj))
                        } else {
                            perimeter++
                        }
                    } else {
                        perimeter++
                    }
                }
            }

            return Pair(area, perimeter)
        }
    }
}
```

This implementation uses a breadth-first search (BFS) approach to efficiently calculate the area and perimeter of each garden. Here's a breakdown of the solution:

1. The `part2` function reads the input file and creates a 2D grid of characters.
2. It iterates through each cell in the grid, skipping visited cells.
3. For each unvisited cell, it calls `calculateGardenMetrics` to compute the area and perimeter of the garden.
4. The total price is calculated by multiplying the area and perimeter for each garden and summing them up.

The `calculateGardenMetrics` function:
1. Uses a queue for BFS to explore all cells of the same type in the garden.
2. Counts the area by incrementing for each visited cell.
3. Calculates the perimeter by checking adjacent cells that are either out of bounds or of a different type.

This solution is optimized for efficiency:
- It uses a visited array to avoid recalculating the same garden multiple times.
- The BFS approach ensures that each cell is visited only once.
- It uses Long for calculations to avoid overflow issues with large inputs.

To use this class:
1. Ensure that the `readFileLines` function from `Utils.kt` is available.
2. Place the input files (`Day12_input`, `Day12_star2_sample0`, etc.) in the appropriate directory.
3. Run the `main` function, which will call `part2` with the main input file and print the result.

You can add additional calls to `part2` with the sample input files to verify the results against the given assertions:

```kotlin
assert(part2("Day12_star2_sample0") == 80L)
assert(part2("Day12_star2_sample1") == 236L)
assert(part2("Day12_star2_sample2") == 368L)
assert(part2("Day12_star2_sample3") == 1206L)
```

This solution should efficiently solve the problem for both the sample inputs and the main input file.

