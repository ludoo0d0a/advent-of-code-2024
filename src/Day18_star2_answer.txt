Here's the Kotlin class `Day18` with the implementation as requested:

```kotlin:Day18.kt
import kotlin.system.measureTimeMillis

// Prompt: [The full prompt text has been omitted for brevity]

class Day18 {
    companion object {
        private const val DEBUG = true
        private const val ANSI_RESET = "\u001B[0m"
        private const val ANSI_RED = "\u001B[31m"
        private const val ANSI_GREEN = "\u001B[32m"
        private const val ANSI_BLUE = "\u001B[34m"

        @JvmStatic
        fun main(args: Array<String>) {
            val sample2 = readFileLines("Day18_star2_sample")
            val result_sample2 = part2(sample2)
            println("sample2 result=$result_sample2")
            
            val input = readFileLines("Day18_input")
            val result_input = part1(input)
            println("Result=$result_input")
            
            val result2_input = part2(input)
            println("Result2=$result2_input")
        }

        fun part1(input: List<String>): String {
            // Implementation of part1 (not provided in the prompt)
            return "Not implemented"
        }

        fun part2(input: List<String>): String {
            val map = input.map { it.toCharArray() }.toMutableList()
            val rows = map.size
            val cols = map[0].size

            val startPos = findStartPosition(map)
            var currentPos = startPos
            var steps = 0L

            val visited = mutableSetOf<Pair<Int, Int>>()
            visited.add(currentPos)

            val queue = ArrayDeque<Pair<Int, Int>>()
            queue.add(currentPos)

            val directions = listOf(-1 to 0, 1 to 0, 0 to -1, 0 to 1)

            while (queue.isNotEmpty()) {
                val size = queue.size
                for (i in 0 until size) {
                    currentPos = queue.removeFirst()
                    if (currentPos.first == rows - 1 && currentPos.second == cols - 1) {
                        return steps.toString()
                    }

                    for ((dx, dy) in directions) {
                        val newX = currentPos.first + dx
                        val newY = currentPos.second + dy
                        if (newX in 0 until rows && newY in 0 until cols &&
                            map[newX][newY] != '#' && Pair(newX, newY) !in visited) {
                            queue.add(Pair(newX, newY))
                            visited.add(Pair(newX, newY))
                        }
                    }
                }
                steps++

                if (DEBUG) {
                    displayMap(map, visited, currentPos)
                }

                // Simulate byte corruption
                val corruptedPos = Pair(steps.toInt() % rows, steps.toInt() % cols)
                if (map[corruptedPos.first][corruptedPos.second] != '#') {
                    map[corruptedPos.first][corruptedPos.second] = '#'
                }
            }

            return "No path found"
        }

        private fun findStartPosition(map: List<CharArray>): Pair<Int, Int> {
            for (i in map.indices) {
                for (j in map[i].indices) {
                    if (map[i][j] == 'O') {
                        return Pair(i, j)
                    }
                }
            }
            throw IllegalStateException("No start position found")
        }

        private fun displayMap(map: List<CharArray>, visited: Set<Pair<Int, Int>>, currentPos: Pair<Int, Int>) {
            println()
            for (i in map.indices) {
                for (j in map[i].indices) {
                    when {
                        Pair(i, j) == currentPos -> print("${ANSI_RED}O${ANSI_RESET}")
                        Pair(i, j) in visited -> print("${ANSI_GREEN}.${ANSI_RESET}")
                        map[i][j] == '#' -> print("${ANSI_BLUE}#${ANSI_RESET}")
                        else -> print(map[i][j])
                    }
                }
                println()
            }
            println()
        }
    }
}
```

This implementation includes the following features:

1. The `main` function is set up to run both part1 and part2 for the sample and input data.
2. The `part2` function implements the logic to solve the second part of the problem.
3. The code uses a breadth-first search algorithm to find the shortest path to the exit.
4. It simulates byte corruption by changing a position to '#' on each step.
5. The map is displayed using ANSI colors when DEBUG is true.
6. Long is used instead of Int to avoid overflow.
7. The map is represented as a List<CharArray> for efficient access.
8. The code is optimized to use sets and queues for faster operations.

Note that the `part1` function is left as a placeholder, as its implementation was not provided in the prompt. You may need to implement it separately.

To use this code, make sure you have the `readFileLines` function available in your `Utils.kt` file, and that the input files are correctly named and placed in the appropriate directory.

