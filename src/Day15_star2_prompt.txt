considering the following problem: 

The lanternfish use your information to find a safe moment to swim in and turn off the malfunctioning robot! Just as they start preparing a festival in your honor, reports start coming in that a second warehouse's robot is also malfunctioning. This warehouse's layout is surprisingly similar to the one you just helped. There is one key difference: everything except the robot is twice as wide! The robot's list of movements doesn't change. To get the wider warehouse's map, start with your original map and, for each tile, make the following changes: If the tile is #, the new map contains ## instead. If the tile is O, the new map contains [] instead. If the tile is ., the new map contains .. instead. If the tile is @, the new map contains @. instead. This will produce a new warehouse map which is twice as wide and with wide boxes that are represented by []. (The robot does not change size.) The larger example from before would now look like this: ####################
##....[]....[]..[]##
##............[]..##
##..[][]....[]..[]##
##....[]@.....[]..##
##[]##....[]......##
##[]....[]....[]..##
##..[][]..[]..[][]##
##........[]......##
####################
 Because boxes are now twice as wide but the robot is still the same size and speed, boxes can be aligned such that they directly push two other boxes at once. For example, consider this situation: #######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^
 After appropriately resizing this map, the robot would push around these boxes as follows: Initial state:
##############
##......##..##
##..........##
##....[][]@.##
##....[]....##
##..........##
##############

Move <:
##############
##......##..##
##..........##
##...[][]@..##
##....[]....##
##..........##
##############

Move v:
##############
##......##..##
##..........##
##...[][]...##
##....[].@..##
##..........##
##############

Move v:
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##.......@..##
##############

Move <:
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##......@...##
##############

Move <:
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##.....@....##
##############

Move ^:
##############
##......##..##
##...[][]...##
##....[]....##
##.....@....##
##..........##
##############

Move ^:
##############
##......##..##
##...[][]...##
##....[]....##
##.....@....##
##..........##
##############

Move <:
##############
##......##..##
##...[][]...##
##....[]....##
##....@.....##
##..........##
##############

Move <:
##############
##......##..##
##...[][]...##
##....[]....##
##...@......##
##..........##
##############

Move ^:
##############
##......##..##
##...[][]...##
##...@[]....##
##..........##
##..........##
##############

Move ^:
##############
##...[].##..##
##...@.[]...##
##....[]....##
##..........##
##..........##
##############
 This warehouse also uses GPS to locate the boxes. For these larger boxes, distances are measured from the edge of the map to the closest edge of the box in question. So, the box shown below has a distance of 1 from the top edge of the map and 5 from the left edge of the map, resulting in a GPS coordinate of 100 * 1 + 5 = 105. ##########
##...[]...
##........
 In the scaled-up version of the larger example from above, after the robot has finished all of its moves, the warehouse would look like this: ####################
##[].......[].[][]##
##[]...........[].##
##[]........[][][]##
##[]......[]....[]##
##..##......[]....##
##..[]............##
##..@......[].[][]##
##......[][]..[]..##
####################
 The sum of these boxes' GPS coordinates is 9021. Predict the motion of the robot and boxes in this new, scaled-up warehouse. What is the sum of all boxes' final GPS coordinates?

then please write a Kotlin class named Day15, with a main function, to solve this problem. 
the main method should compute : 

The first part of the problem is solved, now consider the second part of the problem, 
Another method named 'part2', called from main() method, solves this second part of the problem.
Compute the result for the sample named 'Day15_star2_sample' and for the input, named 'Day15_input'.
Print the result of part2 to the console.
EXPECTED_SAMPLE is the expected value for the sample, listed in the problem.
Now it should be like this : 
'
        @JvmStatic
        fun main(args: Array<String>) {
            val sample2 = readFileLines("Day15_star2_sample")
            val result_sample2 = part2(sample2)
            println("sample2 result=$result_sample2")

//            val input = readFileLines("Day15_input")
//            val result_input = part1(input)
//            println("Result=$result_input")
//
//            val result2_input = part2(input)
//            println("Result2=$result2_input")
        }
'

Input files consist of 2 section :
the first lines containing '#' represents the map,
the next lines containing one of the following characters : '>', '<', '^', 'v' represents the move instructions.

The new warehouse has to be scaled horizontally before computing.
The scaled warehouse has to be parsed into an oriented object system, using objects classes Robot(position), Box(position, width, height), Wall(position) and Warehouse(width, height).
Class Box should be
'
data class Box(var x: Int, var y: Int, var width: Int)
'
where x,y is the position of top left corner of the box.

In the new scaled warehouse, a box has a width of 2.
A robot is 1 unit wide.
A wall is 1 unit wide.
The map should store list of Box classes, and index all positions by coordinates so that it is easy to find the box at a given position. ths isBox method should rely on this index.
The map should also store list of Wall classes, Robot class.

Use dedicated algorithm to detect adjacent boxes, behind first pushed box by the robot ; and if there is some space behind all boxes of the group, the boxes of the group will be pushed.

When a robot moves, if space is empty, robot goes to the new position.
When a robot moves left, and space is occupied by a box, the robot will push the box and all adjacent boxes on the left will be moved from 1 unit, if there is some space behind
When a robot moves right, and reaches a box , the robot will push the box and all adjacent boxes on the right will be moved from 1 unit, if there is some space behind
When a robot moves up, and reaches part of a box, the robot will push the whole box and all adjacent boxes above will be moved from 1 unit, if there is some space behind
When a robot moves down, and reaches part of a box, the robot will push the whole box and all adjacent boxes under will be moved from 1 unit, if there is some space behind

Display map on each iteration, using a boolean flag constant DEBUG=false.
Optimize the algorithm to be efficient and fast so that solution can be found in a reasonable amount of time.
Use indexes as soon as you can to avoid re-calculating the same value and lost time in long computation. 
use Long instead of Int to avoid overflow.
Add this prompt in comment in the code.
Show the whole code for the kotlin class.

