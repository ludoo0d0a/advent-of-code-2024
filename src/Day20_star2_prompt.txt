considering the following problem: 

The programs seem perplexed by your list of cheats. Apparently, the two-picosecond cheating rule was deprecated several milliseconds ago! The latest version of the cheating rule permits a single cheat that instead lasts at most 20 picoseconds. Now, in addition to all the cheats that were possible in just two picoseconds, many more cheats are possible. This six-picosecond cheat saves 76 picoseconds: ###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#1#####.#.#.###
#2#####.#.#...#
#3#####.#.###.#
#456.E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
 Because this cheat has the same start and end positions as the one above, it's the same cheat, even though the path taken during the cheat is different: ###############
#...#...#.....#
#.#.#.#.#.###.#
#S12..#.#.#...#
###3###.#.#.###
###4###.#.#...#
###5###.#.###.#
###6.E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
 Cheats don't need to use all 20 picoseconds; cheats can last any amount of time up to and including 20 picoseconds (but can still only end when the program is on normal track). Any cheat time not used is lost; it can't be saved for another cheat later. You'll still need a list of the best cheats, but now there are even more to choose between. Here are the quantities of cheats in this example that save 50 picoseconds or more: There are 32 cheats that save 50 picoseconds. There are 31 cheats that save 52 picoseconds. There are 29 cheats that save 54 picoseconds. There are 39 cheats that save 56 picoseconds. There are 25 cheats that save 58 picoseconds. There are 23 cheats that save 60 picoseconds. There are 20 cheats that save 62 picoseconds. There are 19 cheats that save 64 picoseconds. There are 12 cheats that save 66 picoseconds. There are 14 cheats that save 68 picoseconds. There are 12 cheats that save 70 picoseconds. There are 22 cheats that save 72 picoseconds. There are 4 cheats that save 74 picoseconds. There are 3 cheats that save 76 picoseconds. Find the best cheats using the updated cheating rules. How many cheats would save you at least 100 picoseconds?

then please write a Kotlin class named Day20, with a main function, to solve this problem. 
the main method should compute : 

The first part of the problem is solved, now consider the second part of the problem, 
Another method named 'part2', called from main() method, solves this second part of the problem.
Keep the implementation of 'part1' from current class 'Day20'.
Compute the result for the sample named 'Day20_star2_sample' and for the input, named 'Day20_input'.
Print the result of part2 to the console.
EXPECTED_SAMPLE is the expected value for the sample, listed in the problem.
Now it should be like this : 
'
@JvmStatic
fun main(args: Array<String>) {
//    val sample2 = readFileLines("Day20_star2_sample")
//    val result_sample2 = part2(sample2)
//    println("sample2 result=$result_sample2")
    
    val input = readFileLines("Day20_input")
//    val result_input = part1(input)
//    println("Result=$result_input")
    
    val result2_input = part2(input)
    println("Result2=$result_input")
}
' 
            

Use readFileLines() method from Utils.kt to read the content of the input file.
Do not add a method readFileLines().

Display map on each iteration, using ansi colored characters, and a boolean flag constant DEBUG (by default = false).
Optimize the algorithm to be efficient and fast so that solution can be found in a reasonable amount of time. 
Use indexes as soon as you can to avoid re-calculating the same value and lost time in long computation. 
Use map as List<CharArray>.
use Long instead of Int to avoid overflow.
Use println("") instead println().
Add this prompt in comment in the code.
Show the whole code for the kotlin class.