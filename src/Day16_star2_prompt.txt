considering the following problem: 

Now that you know what the best paths look like, you can figure out the best spot to sit. Every non-wall tile (S, ., or E) is equipped with places to sit along the edges of the tile. While determining which of these tiles would be the best spot to sit depends on a whole bunch of factors (how comfortable the seats are, how far away the bathrooms are, whether there's a pillar blocking your view, etc.), the most important factor is whether the tile is on one of the best paths through the maze. If you sit somewhere else, you'd miss all the action! So, you'll need to determine which tiles are part of any best path through the maze, including the S and E tiles. In the first example, there are 45 tiles (marked O) that are part of at least one of the various best paths through the maze: ###############
#.......#....O#
#.#.###.#.###O#
#.....#.#...#O#
#.###.#####.#O#
#.#.#.......#O#
#.#.#####.###O#
#..OOOOOOOOO#O#
###O#O#####O#O#
#OOO#O....#O#O#
#O#O#O###.#O#O#
#OOOOO#...#O#O#
#O###.#.#.#O#O#
#O..#.....#OOO#
###############
 In the second example, there are 64 tiles that are part of at least one of the best paths: #################
#...#...#...#..O#
#.#.#.#.#.#.#.#O#
#.#.#.#...#...#O#
#.#.#.#.###.#.#O#
#OOO#.#.#.....#O#
#O#O#.#.#.#####O#
#O#O..#.#.#OOOOO#
#O#O#####.#O###O#
#O#O#..OOOOO#OOO#
#O#O###O#####O###
#O#O#OOO#..OOO#.#
#O#O#O#####O###.#
#O#O#OOOOOOO..#.#
#O#O#O#########.#
#O#OOO..........#
#################
 Analyze your map further. How many tiles are part of at least one of the best paths through the maze?

then please write a Kotlin class named Day16, with a main function, to solve this problem. 
the main method should compute : 

The first part of the problem is solved, now consider the second part of the problem, 
Another method named 'part2', called from main() method, solves this second part of the problem.
Keep the implementation of 'part1' from current class 'Day16'.
Compute the result for the sample named 'Day16_star2_sample' and for the input, named 'Day16_input'.
Print the result of part2 to the console.
EXPECTED_SAMPLE is the expected value for the sample, listed in the problem.
Now it should be like this : 
'
@JvmStatic
fun main(args: Array<String>) {
    val sample2 = readFileLines("Day15_star2_sample")
    val result_sample2 = part2(sample2)
    println("sample2 result=$result_sample2")
    
    val input = readFileLines("Day15_input")
    val result_input = part1(input)
    println("Result=$result_input")
    
    val result2_input = part2(input)
    println("Result2=$result_input")
}
' 
            

Use readFileLines() method from Utils.kt to read the content of the input file.
Do not add a method readFileLines().

Find all solutions to the maze, sorting them by score.
The score is 1000 * turns count + number of steps to reach the end
Display each solution, with the score.
Merge all solutions with the same lowest score, and display total of distinct steps.

Display map on each iteration, using a boolean flag constant DEBUG (by default =false).
Optimize the algorithm to be efficient and fast so that solution can be found in a reasonable amount of time.
Use indexes as soon as you can to avoid re-calculating the same value and lost time in long computation. 
Use map as List<CharArray>.
use Long instead of Int to avoid overflow.
Add this prompt in comment in the code.
Show the whole code for the kotlin class.