considering the following problem:

Fortunately, the Elves are trying to order so much fence that they qualify for a bulk discount!

Under the bulk discount, instead of using the perimeter to calculate the price, you need to use the number of sides each region has. Each straight section of fence counts as a side, regardless of how long it is.

Consider this example again:

AAAA
BBCD
BBCC
EEEC
The region containing the plants of type A plants has 4 sides
The region containing the plants of type B plants has 4 sides
The region containing the plants of type C has 8 sides
The region containing the plants of type D plants has 4 sides
The region containing the plants of type E plants has 4 sides

Using the new method of calculating the per-region price by multiplying the region's area by its number of sides,
regions A through E have prices 16, 16, 32, 4, and 12, respectively, for a total price of 80.

---

then please write a Kotlin class named Day12, with a main function, to solve this problem.

Use readFileLines() method from Utils.kt to read the content of the input file, named 'Day12_input'.
Print the result of part2 to the console using the following format : "Result2=XX" where XX is the result value.

A region defined by all adjacent letter of the same value.
A region can be found inside another one bigger.
Count the numbers of sides of the perimeter of each region.
The perimeter can be computed using a contour tracing algorithm. (Square Tracing algorithm or Moore-Neighbor Tracing)
Don't forget to count inside sides.
Compute the area of each region by counting the numbers of letters in this region.
Compute the price of each region, by multiplying the area by the number of sides of the perimeter.
The sides are counted by following the outer perimeter of each shape, where each straight line segment counts as one side

Compute the total price for files Day12_star2_sample0, log details and check expected result is 80. (A area=4 sides=4, B area=4 sides=4, C area=4 sides=8, D area=3 sides=4)
Compute the total price for files Day12_star2_sample1, log details and check expected result is 236.
Compute the total price for files Day12_star2_sample2, log details and check expected result is 368.
Compute the total price for files Day12_star2_sample3, log details and check expected result is 1206.

Log information for each region and samples: sides count, area, price

Optimize the algorithm to be be efficient and fast so that solution can be found in a reasonable amount of time. 
Use indexes as soon as you can to avoid re-calculating the same value and lost time in long computation. 
use Long instead of Int to avoid overflow.
Add this prompt in comment in the code.
Show the whole code for kotlin class

